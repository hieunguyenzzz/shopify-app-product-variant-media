{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"next/app\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport { Provider, useAppBridge } from \"@shopify/app-bridge-react\";\nimport { authenticatedFetch } from \"@shopify/app-bridge-utils\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport \"@shopify/polaris/dist/styles.css\";\nimport translations from \"@shopify/polaris/locales/en.json\";\n\nfunction userLoggedInFetch(app) {\n  const fetchFunction = authenticatedFetch(app);\n  return async (uri, options) => {\n    const response = await fetchFunction(uri, options);\n\n    if (response.headers.get(\"X-Shopify-API-Request-Failure-Reauthorize\") === \"1\") {\n      const authUrlHeader = response.headers.get(\"X-Shopify-API-Request-Failure-Reauthorize-Url\");\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, authUrlHeader || `/auth`);\n      return null;\n    }\n\n    return response;\n  };\n}\n\nfunction MyProvider(props) {\n  const app = useAppBridge();\n  const client = new ApolloClient({\n    fetch: userLoggedInFetch(app),\n    fetchOptions: {\n      credentials: \"include\"\n    }\n  });\n  const Component = props.Component;\n  return __jsx(ApolloProvider, {\n    client: client\n  }, __jsx(Component, props));\n}\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      host\n    } = this.props;\n    return __jsx(AppProvider, {\n      i18n: translations\n    }, __jsx(Provider, {\n      config: {\n        apiKey: API_KEY,\n        host: host,\n        forceRedirect: true\n      }\n    }, __jsx(MyProvider, _extends({\n      Component: Component\n    }, pageProps))));\n  }\n\n}\n\nMyApp.getInitialProps = async ({\n  ctx\n}) => {\n  return {\n    host: ctx.query.host\n  };\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}